@import "../config/grid";

@function calculateOffsetDelta($k, $n) {
  //for n-column grid, we have n-1 gutters
  $all-gutters-for-grid: ($n - 1) * $gutter;
  //how many amount of gutter contains 1 column
  $offset-for-1-column: $all-gutters-for-grid/$n;
  //for k-column slot we have k-1 gutters
  $gutters-in-column: ($k - 1) * $gutter;
  @return $gutters-in-column - $offset-for-1-column * $k;
}

/**
 * The algorithm is the following:
 * 1) Calculate how many space column takes up. The formula: col_1 = 100%/n - (n-1)/n
 * 2) Calculate how many space k-column item take : col_1*k + (k-1) * gutter_width
 * (n-amount of columns in grid)
 */
@function calculateColumnWidth($k, $n) {
  $delta: calculateOffsetDelta($k, $n);
  $columnWidth: percentage($k / $n);
  @return calc(#{$columnWidth} + #{$delta});
}

/**
 * Offset contain columns space with gutter.
 * Because of the we should add extra gutter compare to calculateColumnWidth
 */
@function calculateOffset($k, $n) {
  $delta: calculateOffsetDelta($k, $n) + $gutter;
  $columnWidth: percentage($k / $n);
  @return calc(#{$columnWidth} + #{$delta});
}

@mixin generate-column-classes($modifier: "") {
  @for $_grid-columns-count from 1 through $number-columns {
    @for $_current-column-count from 1 through $_grid-columns-count {
      &-#{$_grid-columns-count}-#{$_current-column-count}#{$modifier} {
        $width: calculateColumnWidth($_current-column-count, $_grid-columns-count);
        box-sizing: border-box;
        flex-basis: $width;
        flex-grow: 1;
        flex-shrink: 0;
        max-width: $width;
      }
    }
  }
  //compute left offset
  @for $_grid-columns-count from 1 through $number-columns {
    @for $_offset-columns from 0 through $_grid-columns-count - 1 {
      &-offset-#{$_grid-columns-count}-#{$_offset-columns}#{$modifier} {
        margin-left: calculateOffset($_offset-columns, $_grid-columns-count);
      }
    }
  }
  // for last column we should add right margin to correctly break the line
  @for $_grid-columns-count from 1 through $number-columns {
    @for $_end from 0 through $_grid-columns-count {
      $right-offset-columns: $_grid-columns-count -$_end;
      &-last-#{$_grid-columns-count}-#{$right-offset-columns}#{$modifier} {
        margin-right: calculateOffset($right-offset-columns, $_grid-columns-count);
      }
    }
  }
  //to every columns, except the last we should add gutter
  &-not-last#{$modifier} {
    margin-right: $gutter;
  }
}

.fallback-grid {
  box-sizing: content-box; //set default for consistency across browsers
  display: flex;
  flex-wrap: wrap;
  margin: 0 auto;
  max-width: $max-width;

  &--justify-center {
    .fallback-column {
      display: flex;
      justify-content: center;
    }
  }

  &--align-normal {
    align-items: normal;
  }

  &--align-end {
    align-items: flex-end;
  }

  &--align-center {
    align-items: center;
  }
}

.fallback-column {
  @include generate-column-classes();
  @include medium-screen {
    @include generate-column-classes($medium-modifier);
  }

  @include large-screen {
    @include generate-column-classes($large-modifier);
  }

  &--justify-normal {
    display: flex;
    justify-self: normal;
  }

  &--justify-center {
    display: flex;
    justify-content: center;
  }

  &--align-normal {
    display: flex;
    align-self: normal;
  }

  &--align-end {
    display: flex;
    align-self: flex-end;
  }

  &--align-center {
    display: flex;
    align-self: center;
  }
}
